from .parameterized import PY2 as PY2, PY3 as PY3, PYTEST4 as PYTEST4, SkipTest as SkipTest, detect_runner as detect_runner, param as param, parameterized as parameterized, parameterized_argument_value_pairs as parameterized_argument_value_pairs, parameterized_class as parameterized_class, short_repr as short_repr
from _typeshed import Incomplete
from unittest import TestCase

def assert_contains(haystack, needle) -> None: ...

runner: Incomplete
UNITTEST: Incomplete
NOSE2: Incomplete
PYTEST: Incomplete
SKIP_FLAGS: Incomplete
missing_tests: Incomplete

def expect(skip, tests: Incomplete | None = ...) -> None: ...

test_params: Incomplete

def test_naked_function(foo, bar: Incomplete | None = ...) -> None: ...

class TestParameterized:
    def test_instance_method(self, foo, bar: Incomplete | None = ...) -> None: ...

class TestSetupTeardown:
    stack: Incomplete
    actual_order: str
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def test_setup(self, count, *a) -> None: ...

def custom_naming_func(custom_tag, kw_name): ...

class TestParameterizedExpandWithMockPatchForClass(TestCase):
    def test_one_function_patch_decorator(self, foo, mock_umask, mock_getpid) -> None: ...
    def test_multiple_function_patch_decorator(self, foo, bar, mock_umask, mock_fdopen, mock_getpid) -> None: ...

class TestParameterizedExpandWithNoExpand:
    def test_patch_class_no_expand(self, foo, bar, mock_umask, mock_getpid) -> None: ...

class TestParameterizedExpandWithNoMockPatchForClass(TestCase):
    def test_one_function_patch_decorator(self, foo, mock_umask) -> None: ...
    def test_multiple_function_patch_decorator(self, foo, bar, mock_umask, mock_fdopen) -> None: ...

class TestParameterizedExpandWithNoMockPatchForClassNoExpand:
    def test_patch_no_expand(self, foo, bar, mock_umask) -> None: ...

def test_mock_patch_standalone_function(foo, mock_umask) -> None: ...

class TestParamerizedOnTestCase(TestCase):
    def test_on_TestCase(self, foo, bar: Incomplete | None = ...) -> None: ...
    def test_on_TestCase2(self, foo, bar: Incomplete | None = ...) -> None: ...

class TestParameterizedExpandDocstring(TestCase):
    def test_custom_doc_func(self, foo, bar: Incomplete | None = ...) -> None: ...
    def test_single_line_docstring(self, foo) -> None: ...
    def test_empty_docstring(self, foo) -> None: ...
    def test_multiline_documentation(self, foo) -> None: ...
    def test_unicode_docstring(self, foo) -> None: ...
    def test_default_values_get_correct_value(self, foo, bar: int = ...) -> None: ...
    def test_with_leading_newline(self, foo, bar: int = ...) -> None: ...

def test_warns_when_using_parameterized_with_TestCase() -> None: ...
def test_helpful_error_on_invalid_parameters() -> None: ...
def test_helpful_error_on_empty_iterable_input() -> None: ...
def test_skip_test_on_empty_iterable() -> None: ...
def test_helpful_error_on_empty_iterable_input_expand() -> None: ...
def test_wrapped_iterable_input(foo) -> None: ...
def test_helpful_error_on_non_iterable_input(): ...
def tearDownModule() -> None: ...
def test_old_style_classes() -> None: ...

class TestOldStyleClass:
    def test_old_style_classes(self, param) -> None: ...

def test_parameterized_argument_value_pairs(func_params, p, expected) -> None: ...
def test_short_repr(input, expected, n: int = ...) -> None: ...
def test_with_docstring(input) -> None: ...

cases_over_10: Incomplete

def test_cases_over_10(input, expected) -> None: ...

class TestParameterizedClass(TestCase):
    def test_method_a(self) -> None: ...
    def test_method_b(self) -> None: ...
    def testCamelCaseMethodC(self) -> None: ...

class TestNamedParameterizedClass(TestCase):
    def test_method(self) -> None: ...

class TestParameterizedClassDict(TestCase):
    foo: int
    bar: str
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def test_method(self) -> None: ...

class TestUnicodeDocstring:
    def test_with_docstring(self, param) -> None: ...

def test_missing_argument_error() -> None: ...
