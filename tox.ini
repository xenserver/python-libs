# Managing a Project's Virtualenvs with tox
# A comprehensive beginner's introduction to tox.
# Tox is a great tool for standardising and automating any development task
# that benefits from being run in an isolated virtualenv:
# https://www.seanh.cc/2018/09/01/tox-tutorial/
# To run the tests for all supported and installed python versions, run:
# pip3 install 'py>=1.11.0' tox; tox

# Installation of additional python versions:
# - On Fedora 37, `sudo dnf install tox` installs all Python versions, even 3.12a6.
# - On Ubuntu, the deadsnakes/ppa is broken(except for 3.12), so conda or pyenv has to be used:
#   sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev
#                           libreadline-dev libsqlite3-dev xz-utils libffi-dev liblzma-dev
#    curl https://pyenv.run | bash # Then install the displayed commands in your .bashrc.
#    pyenv install 3.{6,7,8,9} && pyenv local 3.{6,7,8,9} # builds and add them to PATH.
#    https://brandonrozek.com/blog/pyenvtox/; https://realpython.com/intro-to-pyenv/
#
# - Note: virtualenv 20.22 broke support for the py27 venv with tox. (at least in some setups)
#   As a workaround, downgrade it to 20.21 if that happens: pip3 install -U 'virtualenv<20.22'
# - For testing on newer Ubuntu hosts which have python2-dev, but not pip2, install pip2 this way:
#   curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py;sudo python2 get-pip.py

[tox]
skipsdist = true
isolated_build = true
envlist = py27-test, py36-test, py37-test, py38-test, py39-test, py310-test, py312-test,
    py311-mypy, py311-cov
# This results in this list of environments tox -e py312-fox -av
# default environments:
# py27-test  -> Run in a python2.7 virtualenv: pytest
# py36-test  -> Run in a python3.6 virtualenv: pytest
# py37-test  -> Run in a python3.7 virtualenv: pytest
# py38-test  -> Run in a python3.8 virtualenv: pytest
# py39-test  -> Run in a python3.9 virtualenv: pytest
# py310-test -> Run in a python3.10 virtualenv: pytest
# py312-test -> Run in a python3.12 virtualenv: pytest
# py311-mypy -> Run in a python3.11 virtualenv: mypy static analyis
# py311-cov  -> Run in a python3.11 virtualenv: generate coverage html reports
#
# additional environments:
# py312-fox  -> Run in a python3.12 virtualenv: generate coverage html reports and open them in firefox

# TODO later: Enable the venv_update extension so that changes to requirements-dev.txt
# are automatically detected.
tox_pip_extensions_ext_venv_update = true

[testenv]
description =
    Run in a {basepython} virtualenv:
    test: pytest
    cov: generate coverage html reports
    fox: generate coverage html reports and open them in firefox
    mypy: mypy static analyis
    covcp: copy the generated .converage and coverage.xml to the UPLOAD_DIR dir for upload
passenv = PYTEST_ADDOPTS
    PYTEST_XDIST_WORKER_COUNT
    covcp: UPLOAD_DIR
    covcp: HOME
    mypy: TERM
    mypy: MYPY_FORCE_COLOR
    mypy: MYPY_FORCE_TERMINAL_WIDTH
    fox: DISPLAY
    fox: XAUTHORITY
    fox: DBUS_SESSION_BUS_ADDRESS
deps =
    {cov,covcp,fox,test}: -r requirements-dev.txt
    mypy: lxml
    mypy: mypy
    mypy: types-mock
    mypy: types-simplejson
    mypy: types-six
allowlist_externals =
    {cov,covcp,fox}: cp
    mypy: cat
    fox: firefox
commands =
    {cov,covcp,fox,test}: pytest --cov
    {cov,covcp,fox}: {[cov]commands}
    covcp: cp -av {envlogdir}/coverage.xml {env:UPLOAD_DIR:.}
    mypy: mypy --txt-report .
    mypy: cat index.txt
    fox: {[fox]commands}

[cov]
commands =
    coverage xml  -o {envlogdir}/coverage.xml
    coverage html -d {envlogdir}/htmlcov
    coverage html -d {envlogdir}/htmlcov-tests --include="tests/*"
    diff-cover --compare-branch=origin/master \
      --html-report  {envlogdir}/coverage-diff.html \
                     {envlogdir}/coverage.xml
    pylint --output  {envlogdir}/pylint.txt --exit-zero                               \
        --msg-template='\{path\}:\{line\}: [\{msg_id\}(\{symbol\}), \{obj\}] \{msg\}' \
            xcp/ tests/
    diff-quality --compare-branch=origin/master --violations=pylint                   \
      --html-report  {envlogdir}/pylint-diff.html {envlogdir}/pylint.txt
    cp -av .coverage {envlogdir}/.coverage
    cp -av           {envlogdir}/coverage.xml .

[fox]
commands = firefox   {envlogdir}/htmlcov/index.html \
                     {envlogdir}/htmlcov-tests/index.html \
                     {envlogdir}/coverage-diff.html

# Map the github python versions to environments to testenvs to run on them:
# See https://github.com/ymyzk/tox-gh-actions for details:
# https://github.com/ymyzk/tox-gh-actions#tox-gh-actions-configuration
# The benefit of using tox is that all versions can be run locally and
# the local venvs will be the same as the venvs created by tox on the GitHub runners:
[gh-actions]
python =
    2.7: py27-test
    3.6: py36-test
    3.7: py37-test
    3.8: py38-test
    3.9: py39-test
    3.10: py310-mypy
    3.11: py311-cov